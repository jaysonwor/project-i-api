# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: project-i-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: '2'

custom:
    # profile-bucket: projecti-${self:provider.stage}-profile
    profile-bucket: project-i-storage

provider:
  name: aws
  runtime: python3.9
  # lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

plugins:
  - serverless-python-requirements

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
  get-picture:
    handler: picture-handler.get
    environment:
      BUCKET: ${self:custom.profile-bucket}
    events:
      - http:
          path: get-picture
          method: post
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Access-Control-Allow-Origin
              - jwt
            allowCredentials: true
          authorizer: aws_iam
  save-picture:
    handler: picture-handler.save
    environment:
      BUCKET: ${self:custom.profile-bucket}
    events:
      - http:
          path: save-picture
          method: post
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Access-Control-Allow-Origin
              - jwt
            allowCredentials: true
          authorizer: aws_iam

# resources:
#   Resources:

#     cognitoUserPool:
#       Type: AWS::Cognito::UserPool
#       Properties:
#         UserPoolName: project-i-${self:provider.stage}-user-pool

#     cognitoResourceServer:
#       Type: AWS::Cognito::UserPoolResourceServer
#       Properties:
#         Name: responses
#         Identifier: responses
#         Scopes:
#           - ScopeDescription: read
#             ScopeName: read
#         UserPoolId:
#           Ref: SisaCognitoUserPool

#     SisaCognitoUserPoolClient:
#       Type: AWS::Cognito::UserPoolClient
#       DependsOn:
#         - SisaCognitoResourceServer
#       Properties:
#         ClientName: sisa-${self:provider.stage}-user-pool-client
#         UserPoolId:
#           Ref: SisaCognitoUserPool
#       # ExplicitAuthFlows:
#       # - ADMIN_NO_SRP_AUTH
#         GenerateSecret: true
#         AllowedOAuthFlowsUserPoolClient: true
#         AllowedOAuthFlows: 
#           - client_credentials
#         AllowedOAuthScopes: 
#           - responses/read    

#     SisaCognitoDomain:
#       Type: AWS::Cognito::UserPoolDomain
#       Properties:
#         Domain: sisa-${self:provider.stage}
#         UserPoolId:
#           Ref: SisaCognitoUserPool

#     # then add an authorizer you can reference later
#     SisaApiGatewayAuthorizer:
#       DependsOn:
#       # this is pre-defined by serverless
#       - ApiGatewayRestApi
#       Type: AWS::ApiGateway::Authorizer
#       Properties:
#         Name: cognito_auth
#         # apparently ApiGatewayRestApi is a global string
#         RestApiId: { "Ref" : "ApiGatewayRestApi" }
#         IdentitySource: method.request.header.Authorization
#         Type: COGNITO_USER_POOLS
#         ProviderARNs:
#         - Fn::GetAtt: [SisaCognitoUserPool, Arn]
