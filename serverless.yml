# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: project-i-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: '2'

custom:
    # profile-bucket: projecti-${self:provider.stage}-profile
    profile-bucket: project-i-storage

provider:
  name: aws
  runtime: python3.9
  # lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource: "*"

plugins:
  - serverless-python-requirements

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true
  get-picture:
    handler: picture-handler.get
    environment:
      BUCKET: ${self:custom.profile-bucket}
    events:
      - http:
          path: get-picture
          method: post
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Access-Control-Allow-Origin
              - jwt
            allowCredentials: true
          authorizer: aws_iam
  save-picture:
    handler: picture-handler.save
    environment:
      BUCKET: ${self:custom.profile-bucket}
    events:
      - http:
          path: save-picture
          method: post
          cors: 
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - Access-Control-Allow-Origin
              - jwt
            allowCredentials: true
          authorizer: aws_iam

resources:
  Resources:

    cognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: project-i-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        # UserAttributeUpdateSettings: 
        #   AttributesRequireVerificationBeforeUpdate: 
        #     - email
        UsernameAttributes:
          - email
        UsernameConfiguration: 
          CaseSensitive: false

    cognitoPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn:
        - cognitoUserPool
      Properties:
        ClientName: project-i-${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: cognitoUserPool
        GenerateSecret: false 
        AccessTokenValidity: 60
        IdTokenValidity: 60
        RefreshTokenValidity: 60
        TokenValidityUnits: 
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: minutes

    cognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      DependsOn:
        - cognitoPoolClient
      Properties:
        IdentityPoolName: project-i-${self:provider.stage}-identity-pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders: 
          - ClientId: !Ref cognitoPoolClient
            ProviderName: !GetAtt cognitoUserPool.ProviderName

    cognitoIdentityPoolRolesAttachment:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      DependsOn:
        - cognitoIdentityPool
      Properties:
        IdentityPoolId: !Ref cognitoIdentityPool
        Roles: 
          authenticated: !GetAtt cognitoAuthorizedRole.Arn
          unauthenticated: !GetAtt cognitoUnAuthorizedRole.Arn

    cognitoAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud": !Ref cognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"

    cognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud": !Ref cognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                  Resource: "*"

        # CognitoIdentityProviders:
        # - ClientId:
        #     Ref: cognitoPoolClient
        #   ProviderName:
        #     Ref: cognitoUserPool
            # Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]

    # cognitoIdentityPoolRoles:
    #   Type: AWS::Cognito::IdentityPoolRoleAttachment
    #   Properties:
    #     IdentityPoolId:
    #       Ref: cognitoIdentityPool
    #     Roles:
    #       authenticated:
    #         Fn::GetAtt: [CognitoAuthRole, Arn]
    #       # Next two lines are the 2 lines of code which break everything
    #       unauthenticated:
    #         Fn::GetAtt: [CognitoUnAuthRole, Arn]

